<template>
  <Tips/>
  <view wx:if="{{init}}">
    <view class="container box-bg">
      <VipCard :member.sync="customerMember" :vipCard.sync="memberCardInfo" :userInfo.sync="customerInfo"
            @detail.user="detail"/>
      <view class="weui-cells weui-cells-form">
        <view class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">消费金额</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" id="price" @input="input" value="{{input.price}}"
                   type="number" maxlength="6" placeholder="请输入消费金额"/>
          </view>
        </view>
        <view class="weui-cell" wx:if="{{memberCardInfo.supplyBalance == 1}}">
          <view class="weui-cell__hd">
            <view class="weui-label">累计积分</view>
          </view>
          <text>{{bonus ? bonus : 0}}</text>
        </view>
      </view>
    </view>

    <view class="tips-box column">
      <block wx:if="{{discountRuleText.length > 0}}">
        <text>• 会员折扣</text>
        <text wx:for="{{discountRuleText}}" class="ml20">- {{item}}</text>
      </block>
      <block wx:if="{{bonusRuleText.length > 0}}">
        <text>• 会员积分</text>
        <text wx:for="{{bonusRuleText}}" class="ml20">- {{item}}</text>
      </block>
    </view>

    <view class="message-box row-center" wx:if="{{message}}">
      {{message}}
    </view>

    <!--操作栏-->
    <ActionBar @tap.user="add" okText="确定" cancelText="返回"/>

  </view>
</template>

<script>
  import wepy from 'wepy';
  import auth from '../../api/auth';
  import input from '../../mixins/input';
  import base from '../../mixins/base';
  import VipCard from '../../components/vip/vip_card';
  import ActionBar from '../../components/common/action_bar';
  import FormTips from '../../components/weui/tips';
  import member from '../../api/member'
  import userInfo from '../../api/customer_info'
  import Event from '../../utils/Event'
  import Tips from '../../utils/Tips'
  export default class VipScan extends wepy.page {
    def = {
      init: false,
      customerInfo: {},
      customerMember: {},
      memberCardInfo: {},
      bonus: null,
      scene: null,
      message: null
    };
    data = {...this.def};

    async onLoad (options, {preload}) {
      if (!auth.isLogin()) {
        this.$redirect('/pages/home/index');
        return;
      }
      try {
        // 扫描二维码进入
        if (options.scene) {
          this.scene = decodeURIComponent(options.scene);
          this.customerMember = await member.Info(options.scene);
          const {customer} = await userInfo.detailInfo(this.customerMember.customerId);
          this.customerInfo = customer;
          this.memberCardInfo = await member.cardInfo();
        }
        // 用户信息进入
        if (preload) {
          this.memberCardInfo = await member.cardInfo();
          this.customerInfo = preload.data.customerInfo;
          this.customerMember = preload.data.customerMember;
        }
        this.loaded();
      } catch (e) {
        this.message = e.message;
        this.$apply();
        Tips.error(e.message);
      }
    };
    methods = {
      async add () {
        if (!this.validate()) {
          return;
        }
        const param = {
          addBonus: this.bonus,
          cardNumber: this.customerMember.memberNumber,
          costMoney: this.input.price,
          type: 'OFFLINE_ORDER_ADD'
        };
        await member.memberAdd(param);
        this.$apply();
        await Tips.success('保存成功');
        const params = {
          bonus: this.bonus,
          customerMember: this.customerMember
        };
        if (this.scene) {
          wepy.navigateBack();
        } else {
          Event.emit(Event.SHOP_CUSTOMER_UPDATE, params);
          wepy.navigateBack();
        }
      },
      detail () {
        this.$navigate(`/pages/customer/info?customerId=${this.customerInfo.id}`);
      }
    };
    components = {
      Tips: FormTips,
      VipCard: VipCard,
      ActionBar: ActionBar
    };
    config = {
      navigationBarTitleText: '会员卡核销'
    };
    validate () {
      const rules = [
        {
          value: this.input.price,
          method: 'min',
          param: 0,
          message: '优惠券面值不能为0或负数'
        }
      ];
      return this.check(rules);
    }
    computed = {
      bonusRuleText() {
        if (this.memberCardInfo == null) return;
        const rule = this.memberCardInfo.bonusRule;
        let describes = [];
        // 开启积分规则
        if (this.memberCardInfo.supplyBonus == 1 && this.memberCardInfo.bonusRule != null) {
          // 有初始积分的情况
          if (rule.initIncreaseBonus > 0) {
            describes.push(`注册绑定手机开卡即送 ${rule.initIncreaseBonus} 积分`);
          }
          describes.push(`每消费 ${rule.costMoneyUnit} 元可获得 ${rule.increaseBonus} 积分`);
          describes.push(`每使用 ${rule.costBonusUnit} 积分，抵扣 ${rule.reduceMoney} 元现金，每笔订单最多使用 ${rule.maxReduceBonus} 积分，订单需满 ${rule.limitMoney} 元`);
        }
        return describes;
      },
      discountRuleText() {
        if (this.memberCardInfo == null) return;
        const rules = this.memberCardInfo.discountRules;
        if (this.memberCardInfo.supplyDiscount == 0 || rules == null) return;
        const describes = [];
        // 有折扣的情况
        for (let rule of rules) {
          const {upgradeFee, discount, levelName} = rule;
          if (discount == 100) continue;
          const upgradeText = upgradeFee == 0 ? '完成注册' : `消费满${upgradeFee}元`;
          const discountText = (discount / 10).toFixed(1);
          const describe = `${levelName}：${upgradeText}，部分商品${discountText}折优惠`;
          describes.push(describe);
        }
        return describes;
      }
    };
    mixins = [base, input];
    watch = {
      input (input) {
        const bonusRule = this.memberCardInfo.bonusRule;
        if (bonusRule != null) {
          if ((input.price % bonusRule.costMoneyUnit) == 0) {
            this.bonus = (bonusRule.increaseBonus / bonusRule.costMoneyUnit) * input.price;
          } else {
            this.bonus = (bonusRule.increaseBonus / bonusRule.costMoneyUnit) * (input.price - (input.price % bonusRule.costMoneyUnit));
          }
          this.$apply();
        }
      }
    }
  }
</script>

<style lang="scss">
    @import "../../styles/variable";
  .box-bg{
    background-color: #FFF;
  }
  .message-box{
    font-size: $text-xxl;
    color: $color-muted;
    height: 300px;
  }
  .tips-box{
    margin-top: 20rpx;
    padding: 20rpx;
    text{
      color: $color-muted;
    }
  }
</style>
